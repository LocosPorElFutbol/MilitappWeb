@using System.Web.Optimization
@using MilitappWeb.Web.Models

@model ResultadosGeneralesDiscriminadoModel

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    @*<title>@ViewBag.Title</title>*@
    <title>Elecciones Legislativas 2017</title>

    @Styles.Render("~/Mdb/css/font-awesome.min.css")
    @Styles.Render("~/Mdb/css/bootstrap.min.css")
    @Styles.Render("~/Mdb/css/mdb.min.css")
    @Styles.Render("~/Mdb/css/style.css")

</head>

<body onload="CargaControles();">

    @*Install-Package Microsoft.AspNet.Web.Optimization*@

    <div class="container">
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <h1>Elecciones Legislativas 2017</h1>
                <br />

                <!--Grafico de barras-->
                <canvas id="ResultadoElectoral"></canvas>
                <br />
                <br />

                <!--Grafico de barras-->
                <canvas id="IngresoDiputados"></canvas>
                <br />
                <br />
                
                <!--Grafico de barras-->
                <canvas id="MesasPorComuna"></canvas>
                <br />
                <br />

                <!--Grafico de barras-->
                <canvas id="MesasAbiertas"></canvas>
                <br />
                <br />

                
            </div>
            <div class="col-md-3"></div>
        </div>


        <!--Tabla-->
        <div class="input-group">

            <span class="input-group-addon">Buscar</span>

            <input id="filter" type="text" class="form-control" placeholder="Escribir acá...">
        </div>
        <div style="overflow: auto">
            <table id="tablaDiputados" class="table table-hover">
                <thead>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.indice)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lca_id)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.can_id)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lcc_orden)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lcc_votos_correspondientes)</th>
                    </tr>
                </thead>
                <tbody class="searchable">
                    @foreach (var obj in Model.Diputados)
                    {
                        <tr>
                            <td>@Html.DisplayFor(m => obj.indice)</td>
                            <td>@Html.DisplayFor(m => obj.tbcandidato.can_nombre)</td>
                            <td>@Html.DisplayFor(m => obj.tbcandidato.can_apellido)</td>
                            <td>@Html.DisplayFor(m => obj.tblistacargo.tblista.lis_descripcion)</td>
                            <td>@Html.DisplayFor(m => obj.lcc_votos_correspondientes)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        

        <!--Tabla-->
        <div class="input-group">

            <span class="input-group-addon">Buscar</span>

            <input id="filter2" type="text" class="form-control" placeholder="Escribir acá...">
        </div>
        <div style="overflow: auto">
            <table id="tablaDiputados" class="table table-hover">
                <thead>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.indice)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lca_id)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.can_id)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lcc_orden)</th>
                        <th>@Html.DisplayNameFor(m => m.Funcionarios.lcc_votos_correspondientes)</th>
                    </tr>
                </thead>
                <tbody class="searchable">                    
                    @foreach (var obj in Model.Legisladores)
                    {
                        <tr>
                            <td>@Html.DisplayFor(m => obj.indice)</td>
                            <td>@Html.DisplayFor(m => obj.tbcandidato.can_nombre)</td>
                            <td>@Html.DisplayFor(m => obj.tbcandidato.can_apellido)</td>
                            <td>@Html.DisplayFor(m => obj.tblistacargo.tblista.lis_descripcion)</td>
                            <td>@Html.DisplayFor(m => obj.lcc_votos_correspondientes)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        <!--Tabla-->
        <div class="input-group">

            <span class="input-group-addon">Buscar</span>

            <input id="filter3" type="text" class="form-control" placeholder="Escribir acá...">
        </div>
        <div style="overflow: auto">
            <table id="tablaVotosPorMesa" class="table table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>@Html.DisplayNameFor(m => m.votosPorMesa.mes_id)</th>
                        <th>Dip - Vamos Juntos</th>
                        <th>Dip - Unidad Porteña</th>
                        <th>Dip - Evolucion Ciudadana</th>
                        <th>Dip - 1Pais</th>
                        <th>Leg - Vamos Juntos</th>
                        <th>Leg - Unidad Porteña</th>
                        <th>Leg - Evolucion Ciudadana</th>
                        <th>Leg - 1Pais</th>
                    </tr>
                </thead>
                <tbody class="searchable">                   
                    @foreach (var obj in Model.ListaVotosPorMesa)
                    {
                        <tr>
                            <td>@Html.DisplayFor(m => obj.id)</td>
                            <td>@Html.DisplayFor(m => obj.mes_id)</td>
                            <td>@Html.DisplayFor(m => obj.lca1)</td>
                            <td>@Html.DisplayFor(m => obj.lca2)</td>
                            <td>@Html.DisplayFor(m => obj.lca3)</td>
                            <td>@Html.DisplayFor(m => obj.lca4)</td>
                            <td>@Html.DisplayFor(m => obj.lca5)</td>
                            <td>@Html.DisplayFor(m => obj.lca6)</td>
                            <td>@Html.DisplayFor(m => obj.lca7)</td>
                            <td>@Html.DisplayFor(m => obj.lca8)</td>                            
                        </tr>
                    }
                </tbody>
            </table>

        </div>



        <!--Tabla-->
        <div class="input-group">

            <span class="input-group-addon">Buscar</span>

            <input id="filter4" type="text" class="form-control" placeholder="Escribir acá...">
        </div>
        <div style="overflow: auto">
            <table id="tablaHorariosMesa" class="table table-hover">
                <thead>
                    <tr>                        
                        <th>#</th>
                        <th>Mesa</th>
                        <th>Fecha apertura</th>
                        <th>Fecha cierre</th>
                    </tr>
                </thead>
                <tbody class="searchable">
                    @foreach (var obj in Model.MesasAbiertasCerradas)
                    {
                        if (obj.pla_apertura != default(DateTime)) { 
                            <tr>
                                <td>@Html.DisplayFor(m => obj.indice)</td>                                
                                <td>@Html.DisplayFor(m => obj.mes_id)</td>                                
                                <td>@Html.DisplayFor(m => obj.pla_apertura)</td>
                                @if (obj.pla_cierre != default(DateTime)) { 
                                    <td>@Html.DisplayFor(m => obj.pla_cierre)</td>                            
                                }
                                else
                                {
                                    <td></td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>

        </div>

    </div> 

    @*<body>*@

    <!-- Start your project here-->
    <!--Card-->
    @*<div class="card m-5" style="width: 22rem;">

            <!--Card image-->
            <div class="view overlay hm-white-slight">
                <img src="https://mdbootstrap.com/img/Photos/Horizontal/Nature/4-col/img%20%287%29.jpg" class="img-fluid" alt="">
                <a href="#">
                    <div class="mask"></div>
                </a>
            </div>

            <!--Card content-->
            <div class="card-body">
                <!--Title-->
                <h4 class="card-title">Card title</h4>
                <!--Text-->
                <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                <a href="#" class="btn btn-primary">Button</a>
            </div>

        </div>*@
    <!--/.Card-->
    <!-- /Start your project here-->
    <!-- SCRIPTS -->
    @Scripts.Render("~/Mdb/js/jquery")
    @Scripts.Render("~/Mdb/js/popper")
    @Scripts.Render("~/Mdb/js/bootstrap")
    @Scripts.Render("~/Mdb/js/mdbMin")



    <script type="text/javascript">

        function GetDatosComunaPorMesa(obj) {
            var strMethodUrl = '@Url.Action("GetDatosComunaPorMesaBarra", "ResultadoElectoral")'
            $.getJSON(strMethodUrl, function (json) {
                var totales = 0;
                for (var i = 0; i < json.length; i++) {                    
                    totales = totales + json[i];
                }                
                graficoCantidadMesasAbiertasComuna(json, totales);
            });
        }

        function GetMesasAbiertas(obj) {
            var strMethodUrl = '@Url.Action("GetMesasAbiertas", "ResultadoElectoral")'
            $.getJSON(strMethodUrl, function (json) {
                var totales = 0;
                for (var i = 0; i < json.length; i++) {
                    totales = totales + json[i];
                }
                graficoBarrasMesasAbiertas(json, totales);
            });
        }


        function callDatosResultadoElectoral(obj) {            
            var strMethodUrl = '@Url.Action("armarDatosGraficoBarras", "ResultadoElectoral")'
            $.getJSON(strMethodUrl, function (json) {                
                graficoBarras(json);
            });            
        }

        
        function callDatosIngresoDiputados(obj) {
            var strMethodUrl = '@Url.Action("armarDatosIngresoDiputados", "ResultadoElectoral")'
            $.getJSON(strMethodUrl, function (json) {                
                if (json[0] == 0) {
                    for (var i = 0; i <= 3; i++) {
                        json[i] = 0;                        
                    }
                    graficoIngresoDiputados(json);
                }
                else {
                    graficoIngresoDiputados(json);
                }
            });
        }
               
        function CargaControles() {
            var obj;
            callDatosResultadoElectoral(obj);
            callDatosIngresoDiputados(obj);
            GetDatosComunaPorMesa(obj);
            GetMesasAbiertas(obj);
        }

        function graficoBarrasMesasAbiertas(obj, totales) {
            var ctxB = document.getElementById("MesasAbiertas").getContext('2d');
            var myBarChart12 = new Chart(ctxB, {
                type: 'bar',
                data: {
                    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                    datasets: [{
                        label: 'Mesas abiertas por comuna: ' + totales,
                        data: obj,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                        ],
                        borderWidth: 1
                    }]
                },
                scaleStartValue: 0,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }

        function graficoBarras(obj) {
            var ctxB = document.getElementById("ResultadoElectoral").getContext('2d');
            var myBarChart1 = new Chart(ctxB, {
                type: 'bar',
                data: {
                    labels: ["DIP_VJ", "LEG_VJ", "DIP_UP", "LEG_UP", "DIP_Ev", "LEG_Ev", "DIP_1P", "LEG_1P"],
                    datasets: [{
                        label: '% de Votos',
                        data: obj,                        
                        backgroundColor: [
                            'rgba(255, 255, 0, 0.2)',
                            'rgba(255, 255, 55, 0.2)',                            
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(61, 241, 245, 0.2)',
                            'rgba(0, 204, 0, 0.2)',
                            'rgba(125, 251, 55, 0.2)',                            
                            'rgba(51, 51, 51, 0.2)',
                            'rgba(178, 178, 178, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 255, 0, 1)',
                            'rgba(255, 255, 55, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(61, 241, 245, 1)',
                            'rgba(0, 204, 0, 1)',
                            'rgba(125, 251, 55, 1)',
                            'rgba(51, 51, 51, 1)',
                            'rgba(178, 178, 178, 1)',
                        ],
                        borderWidth: 1
                    }]
                },
                scaleStartValue : 0,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }
        

        

        function graficoCantidadMesasAbiertasComuna(obj, total) {
            var ctxB = document.getElementById("MesasPorComuna").getContext('2d');
            var myBarChart2 = new Chart(ctxB, {
                type: 'bar',                
                data: {
                    labels: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"],
                    datasets: [{
                        label: 'Resultados enviados por comuna: '+ total,
                        data: obj,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(255, 99, 132, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                        ],
                        borderWidth: 1
                    }]
                },
                scaleStartValue: 0,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }

        
        
        function graficoIngresoDiputados(obj) {
            var ctxBB = document.getElementById("IngresoDiputados").getContext('2d');
            var myBarChart3 = new Chart(ctxBB, {
                type: 'bar',
                data: {
                    labels: ["DIP_VJ", "DIP_UP", "DIP_Ev", "DIP_1P"],
                    datasets: [{
                        label: 'Ingreso de DIPUTADOS',
                        data: obj,                                                
                        backgroundColor: [
                            'rgba(255, 255, 0, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(0, 204, 0, 0.2)',
                            'rgba(51, 51, 51, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 255, 0, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(0, 204, 0, 1)',
                            'rgba(51, 51, 51, 1)',
                        ],
                        borderWidth: 1
                    }]
                },
                scaleStartValue: 0,
                options: {
                    scales: {
                        includeZero: true,
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });
        }


        //Funcion para el filtrado
        $(document).ready(function () {

            (function ($) {

                $('#filter').keyup(function () {

                    var rex = new RegExp($(this).val(), 'i');
                    $('.searchable tr').hide();
                    $('.searchable tr').filter(function () {
                        return rex.test($(this).text());
                    }).show();

                })

                $('#filter2').keyup(function () {

                    var rex = new RegExp($(this).val(), 'i');
                    $('.searchable tr').hide();
                    $('.searchable tr').filter(function () {
                        return rex.test($(this).text());
                    }).show();

                })

                $('#filter3').keyup(function () {

                    var rex = new RegExp($(this).val(), 'i');
                    $('.searchable tr').hide();
                    $('.searchable tr').filter(function () {
                        return rex.test($(this).text());
                    }).show();

                })

                $('#filter4').keyup(function () {

                    var rex = new RegExp($(this).val(), 'i');
                    $('.searchable tr').hide();
                    $('.searchable tr').filter(function () {
                        return rex.test($(this).text());
                    }).show();

                })

            }(jQuery));

        })

    </script>
</body>

</html>
